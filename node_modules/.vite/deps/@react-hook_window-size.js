import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@react-hook/debounce/dist/module/index.js
var React2 = __toESM(require_react());

// node_modules/@react-hook/latest/dist/module/index.js
var React = __toESM(require_react());
var useLatest = (current) => {
  const storedValue = React.useRef(current);
  React.useEffect(() => {
    storedValue.current = current;
  });
  return storedValue;
};
var module_default = useLatest;

// node_modules/@react-hook/debounce/dist/module/index.js
var useDebounceCallback = (callback, wait = 100, leading = false) => {
  const storedCallback = module_default(callback);
  const timeout = React2.useRef();
  const deps = [wait, leading, storedCallback];
  function _ref() {
    timeout.current && clearTimeout(timeout.current);
    timeout.current = void 0;
  }
  React2.useEffect(() => _ref, deps);
  function _ref2() {
    timeout.current = void 0;
  }
  return React2.useCallback(function() {
    const args = arguments;
    const {
      current
    } = timeout;
    if (current === void 0 && leading) {
      timeout.current = setTimeout(_ref2, wait);
      return storedCallback.current.apply(null, args);
    }
    current && clearTimeout(current);
    timeout.current = setTimeout(() => {
      timeout.current = void 0;
      storedCallback.current.apply(null, args);
    }, wait);
  }, deps);
};
var useDebounce = (initialState, wait, leading) => {
  const state = React2.useState(initialState);
  return [state[0], useDebounceCallback(state[1], wait, leading)];
};

// node_modules/@react-hook/event/dist/module/index.js
var React3 = __toESM(require_react());
function useEvent(target, type, listener, cleanup) {
  const storedListener = React3.useRef(listener);
  const storedCleanup = React3.useRef(cleanup);
  React3.useEffect(() => {
    storedListener.current = listener;
    storedCleanup.current = cleanup;
  });
  React3.useEffect(() => {
    const targetEl = target && "current" in target ? target.current : target;
    if (!targetEl)
      return;
    let didUnsubscribe = 0;
    function listener2(...args) {
      if (didUnsubscribe)
        return;
      storedListener.current.apply(this, args);
    }
    targetEl.addEventListener(type, listener2);
    const cleanup2 = storedCleanup.current;
    return () => {
      didUnsubscribe = 1;
      targetEl.removeEventListener(type, listener2);
      cleanup2 && cleanup2();
    };
  }, [target, type]);
}
var module_default2 = useEvent;

// node_modules/@react-hook/window-size/dist/module/index.js
var emptyObj = {};
var win = typeof window === "undefined" ? null : window;
var wv = win && typeof win.visualViewport !== "undefined" ? win.visualViewport : null;
var getSize = () => [document.documentElement.clientWidth, document.documentElement.clientHeight];
var useWindowSize = function(options) {
  if (options === void 0) {
    options = emptyObj;
  }
  const {
    wait,
    leading,
    initialWidth = 0,
    initialHeight = 0
  } = options;
  const [size, setDebouncedSize] = useDebounce(
    /* istanbul ignore next */
    typeof document === "undefined" ? [initialWidth, initialHeight] : getSize,
    wait,
    leading
  );
  const setSize = () => setDebouncedSize(getSize);
  module_default2(win, "resize", setSize);
  module_default2(wv, "resize", setSize);
  module_default2(win, "orientationchange", setSize);
  return size;
};
var useWindowHeight = (options) => useWindowSize(options)[1];
var useWindowWidth = (options) => useWindowSize(options)[0];
export {
  useWindowHeight,
  useWindowSize,
  useWindowWidth
};
//# sourceMappingURL=@react-hook_window-size.js.map
